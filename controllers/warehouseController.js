const mongoose = require('mongoose');
const Warehouse  = require('../models/warehouse');
const Ingredient = require('../models/ingredient');

// L·∫•y danh s√°ch kho v·ªõi ph√¢n trang
exports.getAllWarehouses = async (req, res) => {
    try {
        let { page, limit } = req.query;
        page = parseInt(page) || 1;
        limit = parseInt(limit) || 10;
        const skip = (page - 1) * limit;

        console.log(`üì¶ Fetching Warehouses - Page: ${page}, Limit: ${limit}`);

        // L·∫•y danh s√°ch warehouse + populate th√¥ng tin nguy√™n li·ªáu
        const warehouses = await Warehouse.find()
            .skip(skip)
            .limit(limit)
            .populate("listIngredient.ingredientId");

        // ƒê·∫øm t·ªïng s·ªë warehouse
        const total = await Warehouse.countDocuments();

        console.log(`‚úÖ Found ${warehouses.length} warehouses (Total: ${total})`);

        res.status(200).json({
            warehouses,
            total,
            page,
            totalPages: Math.ceil(total / limit),
        });
    } catch (error) {
        console.error("‚ùå Error fetching warehouses:", error);
        res.status(500).json({ message: "Server error", error: error.message });
    }
};

// L·∫•y kho theo ID
exports.getWarehouseById = async (req, res) => {
    try {
        const warehouse = await Warehouse.findById(req.params.id);
        if (!warehouse) {
            return res.status(404).json({ message: 'Warehouse not found' });
        }
        res.status(200).json({ warehouse });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
};

// T·∫°o kho m·ªõi
exports.createWarehouse = async (req, res) => {
    try {
        const { warehouseName, warehouseType, address, manager, listIngredient } = req.body;

        // Ki·ªÉm tra warehouseType c√≥ h·ª£p l·ªá kh√¥ng
        if (!["Warehouse", "Subwarehouse"].includes(warehouseType)) {
            return res.status(400).json({ message: "warehouseType ch·ªâ ƒë∆∞·ª£c l√† 'Warehouse' ho·∫∑c 'Subwarehouse'" });
        }

        const newWarehouse = new Warehouse(req.body);
        await newWarehouse.save();
        res.status(201).json({ message: 'Warehouse created successfully', warehouse: newWarehouse });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
};


// C·∫≠p nh·∫≠t kho theo ID
exports.updateWarehouse = async (req, res) => {
    try {
        const updatedWarehouse = await Warehouse.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedWarehouse) {
            return res.status(404).json({ message: 'Warehouse not found' });
        }
        res.status(200).json({ message: 'Warehouse updated successfully', warehouse: updatedWarehouse });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
};

// X√≥a kho theo ID
exports.deleteWarehouse = async (req, res) => {
    try {
        const deletedWarehouse = await Warehouse.findByIdAndDelete(req.params.id);
        if (!deletedWarehouse) {
            return res.status(404).json({ message: 'Warehouse not found' });
        }
        res.status(200).json({ message: 'Warehouse deleted successfully' });
    } catch (error) {
        res.status(500).json({ message: 'Server error', error });
    }
};

// Th√™m nguy√™n li·ªáu v√†o trong kho
exports.addIngredientToWarehouse = async (req, res) => {
    try {
        const { warehouseId, ingredientId, quantity } = req.body;

        // Ki·ªÉm tra ingredient c√≥ t·ªìn t·∫°i kh√¥ng
        const ingredient = await Ingredient.findById(ingredientId);
        if (!ingredient) {
            return res.status(404).json({ message: "Ingredient not found" });
        }

        // Ki·ªÉm tra warehouse c√≥ t·ªìn t·∫°i kh√¥ng
        const warehouse = await Warehouse.findById(warehouseId);
        if (!warehouse) {
            return res.status(404).json({ message: "Warehouse not found" });
        }
        
        // Ki·ªÉm tra conversionRate
        const conversionRate = ingredient.conversionRate ?? 1; // N·∫øu null ho·∫∑c undefined th√¨ m·∫∑c ƒë·ªãnh l√† 1

        // T√≠nh t·ªïng s·ªë l∆∞·ª£ng theo ƒë∆°n v·ªã g·ªëc
        const totalQuantity = quantity * conversionRate;

        // Ki·ªÉm tra xem nguy√™n li·ªáu ƒë√£ c√≥ trong kho ch∆∞a
        const existingIndex = warehouse.listIngredient.findIndex(
            (item) => item.ingredientId.toString() === ingredientId
        );

        if (existingIndex !== -1) {
            // N·∫øu ƒë√£ c√≥ nguy√™n li·ªáu trong kho, c·ªông th√™m s·ªë l∆∞·ª£ng m·ªõi
            warehouse.listIngredient[existingIndex].quantity += totalQuantity;
        } else {
            // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v√†o danh s√°ch nguy√™n li·ªáu
            warehouse.listIngredient.push({
                ingredientId,
                quantity: totalQuantity,
                conversionRate, // Th√™m conversionRate v√†o object
            });
        }

        console.log("üöÄ listIngredient tr∆∞·ªõc khi l∆∞u:", warehouse.listIngredient);
        // L∆∞u l·∫°i warehouse sau khi c·∫≠p nh·∫≠t
        await warehouse.save();
        res.status(200).json({ message: "Ingredient added to warehouse successfully", warehouse });
    } catch (error) {
        console.error("Error adding ingredient:", error);
        res.status(500).json({ message: "Server error", error });
    }
};

exports.removeIngredientFromWarehouse = async (req, res) => {
    try {
        const { warehouseId, ingredientId } = req.body; // Nh·∫≠n c·∫£ 2 ID t·ª´ body

        // Ki·ªÉm tra warehouse c√≥ t·ªìn t·∫°i kh√¥ng
        const warehouse = await Warehouse.findById(warehouseId);
        if (!warehouse) {
            return res.status(404).json({ message: "Warehouse not found" });
        }

        // Ki·ªÉm tra ingredient c√≥ trong warehouse kh√¥ng
        const ingredientExists = warehouse.listIngredient.some(
            (item) => item.ingredientId.toString() === ingredientId
        );
        if (!ingredientExists) {
            return res.status(404).json({ message: "Ingredient not found in warehouse" });
        }

        // Xo√° ingredient kh·ªèi listIngredient
        warehouse.listIngredient = warehouse.listIngredient.filter(
            (item) => item.ingredientId.toString() !== ingredientId
        );

        // L∆∞u warehouse sau khi c·∫≠p nh·∫≠t
        await warehouse.save();

        res.status(200).json({ message: "Ingredient removed from warehouse successfully", warehouse });
    } catch (error) {
        console.error("‚ùå L·ªói khi xo√° nguy√™n li·ªáu:", error);
        res.status(500).json({ message: "Server error", error });
    }
};


