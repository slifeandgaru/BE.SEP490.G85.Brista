const mongoose = require('mongoose');
const Order = require("../models/order");
const Product = require("../models/product");

// L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
exports.getOrders = async (req, res) => {
    try {
        const orders = await Order.find().populate("userId vatId voucherId product.productId");
        res.status(200).json(orders);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

// L·∫•y ƒë∆°n h√†ng theo ID
exports.getOrderByPhone = async (req, res) => {
    try {
        const phone = req.params.phone;
        const orders = await Order.find({ phone, status: "unpaid" })
            .populate("userId vatId voucherId product.productId");

        if (orders.length === 0) {
            return res.status(200).json({ message: "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng n√†o ch∆∞a thanh to√°n v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y." });
        }

        res.status(200).json(orders);
    } catch (error) {
        console.error("Error finding order by phone:", error);
        res.status(500).json({ message: "Server error", error });
    }
};

// T·∫°o ƒë∆°n h√†ng m·ªõi
exports.createOrder = async (req, res) => {
    try {
        const { userId, userName, product, phone } = req.body;

        // üîç T√¨m ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng c√≥ status l√† "unpaid"
        let existingOrder = await Order.findOne({
            $or: [{ userId }, { phone }],
            status: "unpaid"
        });

        if (existingOrder) {
            // ‚úÖ N·∫øu ƒë∆°n h√†ng ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t danh s√°ch s·∫£n ph·∫©m
            product.forEach((newProduct) => {
                const existingProduct = existingOrder.product.find(p =>
                    p.productId.toString() === newProduct.productId
                );

                if (existingProduct) {
                    // N·∫øu s·∫£n ph·∫©m ƒë√£ c√≥, c·ªông d·ªìn quantity
                    existingProduct.quantity += newProduct.quantity;
                } else {
                    // N·∫øu ch∆∞a c√≥, th√™m m·ªõi v√†o danh s√°ch
                    existingOrder.product.push(newProduct);
                }
            });

        } else {
            // ‚ùå N·∫øu ch∆∞a c√≥ ƒë∆°n h√†ng, t·∫°o m·ªõi
            existingOrder = new Order({
                phone,
                userId,
                product,
                status: "unpaid",
                orderDate: new Date()
            });
        }

        // üìå L·∫•y danh s√°ch productId ƒë·ªÉ truy v·∫•n gi√° s·∫£n ph·∫©m
        const productIds = existingOrder.product.map(p => p.productId);
        const productsInDB = await Product.find({ _id: { $in: productIds } });

        // üéØ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn (total = sum(quantity * price))
        existingOrder.total = existingOrder.product.reduce((total, p) => {
            const productInfo = productsInDB.find(prod => prod._id.toString() === p.productId.toString());
            return total + (productInfo ? productInfo.price * p.quantity : 0);
        }, 0);

        // üíæ L∆∞u l·∫°i ƒë∆°n h√†ng
        const savedOrder = await existingOrder.save();
        res.status(201).json(savedOrder);

    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// C·∫≠p nh·∫≠t ƒë∆°n h√†ng
exports.updateOrder = async (req, res) => {
    try {
        const updatedOrder = await Order.findByIdAndUpdate(req.params.id, req.body, { new: true });
        if (!updatedOrder) return res.status(404).json({ message: "Order not found" });
        res.status(200).json(updatedOrder);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
};

// X√≥a ƒë∆°n h√†ng
exports.deleteOrder = async (req, res) => {
    try {
        const deletedOrder = await Order.findByIdAndDelete(req.params.id);
        if (!deletedOrder) return res.status(404).json({ message: "Order not found" });
        res.status(200).json({ message: "Order deleted successfully" });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
};

//L·∫•y order b·∫±ng customer id
exports.getOrdersByCustomerId = async (req, res) => {
    try {
        // Chuy·ªÉn customerId t·ª´ string -> ObjectId
        const customerId = req.params.id;
        console.log(customerId)

        // T√¨m t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa kh√°ch h√†ng
        const orders = await Order.find({ customerId })
            .populate("userId vatId voucherId product.productId");

        if (!orders.length) return res.status(404).json({ message: "No orders found for this customer" });

        res.status(200).json(orders);
    } catch (error) {
        console.error("Error fetching orders:", error);
        res.status(500).json({ message: "Server error" });
    }
};
